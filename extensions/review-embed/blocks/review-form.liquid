{% schema %}
{
  "name": "Review Form",
  "target": "section",
  "enabled_on": {
    "templates": ["product"]
  },
  "settings": []
}
{% endschema %}

<div class="product-reviews">
  <h3>Reviews</h3>
  <div id="reviews-container">
    {% for review in product.metafields.custom.reviews.value %}
      <div class="review">
        <p><strong>Rating:</strong> {{ review.rating }} stars</p>
        <p>{{ review.message }}</p>
      </div>
    {% else %}
      <p>No reviews yet. Be the first to leave a review!</p>
    {% endfor %}
  </div>

  <h3>Leave a Review</h3>
  <form id="review-form">
    <label for="review-rating">Rating (1-5 stars):</label>
    <div class="rating-bubbles">
      <input type="radio" id="star1" name="rating" value="1" required>
      <label for="star1">1</label>

      <input type="radio" id="star2" name="rating" value="2">
      <label for="star2">2</label>

      <input type="radio" id="star3" name="rating" value="3">
      <label for="star3">3</label>

      <input type="radio" id="star4" name="rating" value="4">
      <label for="star4">4</label>

      <input type="radio" id="star5" name="rating" value="5">
      <label for="star5">5</label>
    </div>


    <label for="review-message">Your Review:</label>
    <textarea id="review-message" name="message" required></textarea>

    <button type="submit" id='submit-button'>Submit Review</button>
  </form>
</div>

<script>
  document.getElementById('review-form').addEventListener('submit', async (event) => {
    event.preventDefault();

    const rating = document.getElementById('review-rating').value;
    const message = document.getElementById('review-message').value;
    const productId = {{ product.id | json }};

    if (!rating || !message) {
      alert('Please fill out both fields before submitting your review.');
      return;
    }

    const reviewData = {
      rating: parseInt(rating),
      message: message,
      productId: productId
    };

    try {
      const response = await fetch('/apps/review-proxy', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(reviewData)
      });

      if (response.ok) {
        alert('Thank you for your review!');
        location.reload();
      } else {
        alert('Something went wrong. Please try again later.');
      }
    } catch (error) {
      console.error('Error submitting review:', error);
      alert('An unexpected error occurred. Please try again later.');
    }
  });
</script>

<style>
  .product-reviews {
    padding: 20px;
    border: 1px solid #ddd;
    margin-top: 20px;
  }

  .review {
    padding: 10px;
    border-bottom: 1px solid #eee;
  }

  .review:last-child {
    border-bottom: none;
  }

  #review-form {
    margin-top: 20px;
  }

  #review-form label {
    display: block;
    margin-bottom: 5px;
    margin-top: 20px;
  }

  #review-form input, #review-form textarea {
    width: 100%;
    padding: 10px;
    margin-bottom: 10px;
    border-radius: 12px;
  }

  #review-form button {
    padding: 10px 15px;
    background-color: #007bff;
    color: #fff;
    border: none;
    cursor: pointer;
    border-radius: 12px;
  }
  
  .rating-bubbles {
    display: flex;
    gap: 10px;
  }

  .rating-bubbles input[type="radio"] {
    display: none;
  }

  .rating-bubbles label {
    width: 30px;
    height: 30px;
    line-height: 30px;
    text-align: center;
    border-radius: 50%;
    background-color: #f0f0f0;
    cursor: pointer;
    font-weight: bold;
  }

  .rating-bubbles input[type="radio"]:checked + label {
    background-color: #007BFF;
    color: white;
  }
</style>
